Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>devel/\nlogs/\nbuild/\nbin/\nlib/\nmsg_gen/\nsrv_gen/\nmsg/*Action.msg\nmsg/*ActionFeedback.msg\nmsg/*ActionGoal.msg\nmsg/*ActionResult.msg\nmsg/*Feedback.msg\nmsg/*Goal.msg\nmsg/*Result.msg\nmsg/_*.py\nbuild_isolated/\ndevel_isolated/\n\n# Generated by dynamic reconfigure\n*.cfgc\n/cfg/cpp/\n/cfg/*.py\n\n# Ignore generated docs\n*.dox\n*.wikidoc\n\n# eclipse stuff\n.project\n.cproject\n\n# qcreator stuff\nCMakeLists.txt.user\n\nsrv/_*.py\n*.pcd\n*.pyc\nqtcreator-*\n*.user\n\n/planning/cfg\n/planning/docs\n/planning/src\n\n*~\n\n# Emacs\n.#*\n\n# Catkin custom files\nCATKIN_IGNORE\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
+++ .gitignore	(date 1606204041000)
@@ -49,3 +49,6 @@
 
 # Catkin custom files
 CATKIN_IGNORE
+
+# mac temp storage
+*.DS_Store
\ No newline at end of file
Index: src/mss_tools/platform_tf/src/listen_platform_tf_talker.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\n * @file   listen_platform_tf_talker.cpp\n * @Author Finn Linzer, 4. Master Semester HafenCity University (finn.linzer@gmail.com)\n * @date   August, 2017\n * @brief  Listen to Tachymeter and IMU data, merge them into a TF - Frame\n * @brief  Indentation: Two spaces, no tabs\n\n * Therefore we need a Position (measured by tachymeter) and an orientation (measured by imu).\n\n * Tachymeter Data are measured continously by a modern Tachymeter. The data are distributed over a ros NodeHandle (ex. /tachy_points). These Data are already converted to a X,Y,Z Coordinate + Timestamp. This data is brought to you via a geometry_msgs::PointStamped object.\n\n*  IMU Data are measured continously by a modern IMU. The data are distributed over a ros NodeHandle (ex. imu/data). This topic measures the orientation of a platform. This data is brought to you via a sensor_msgs::Imu object.\n\nTo have the correct pose in ros, we merge these information to a full functional TF2-Frame. The correct advertisement of this information is the main goal of the following code.\n */\n\n/**\n * @name    TODO: differ between imu and tachy only datastream\n * @brief   rosrun platform_tf listen_platform_tf_talker 23\n * \t    check wheather imu and tachymeter data are available with correct names\n23 is an example for the init angle of the imu, check which value fits best.\nTODO: Determine angle over absolute method\n *\n * @param [in] degree . Degree in which the data should be transformed in the Z-Axis\n *\n * @retval TRUE   Successfully provide Frame\n * @retval FALSE  Oops, did something.\n *\n * Example Usage:\n * @code\n *    rosrun platform_tf listen_platform_tf_talker 23  // turn incoming orientation 23 degree in Z-Axis\n * @endcode\n */\n\n\n#include <ros/ros.h>\n#include \"std_msgs/String.h\"\n#include \"sensor_msgs/Imu.h\"\n#include \"geometry_msgs/PointStamped.h\"\n#include <tf2_ros/transform_broadcaster.h>\n#include <tf2/LinearMath/Quaternion.h>\n\nclass TachyInfo\n{\npublic:\n  TachyInfo()\n  {\n  }\n  void tachyCallback(const geometry_msgs::PointStamped::ConstPtr&);\n  double get_X();\n  double get_Y();\n  double get_Z();\n  unsigned int get_sec();\n  unsigned int get_nsec();\nprivate:\n  void set_X(double);\n  void set_Y(double);\n  void set_Z(double);\n  double x_coord;\n  double y_coord;\n  double z_coord;\n  void set_time(unsigned int, unsigned int);\n  unsigned int nsec_last_message{0};\n  unsigned int sec_last_message{0};\n};\n\nvoid TachyInfo::tachyCallback(const geometry_msgs::PointStamped::ConstPtr& msg){\n  set_X(0);\n  set_Y(0);\n  set_Z(0);\n  set_time(0,0);\n  //ROS_INFO(\"I heard a tachymeter: [%s]\", msg->header.frame_id.c_str());\n  set_X(msg->point.x);\n  set_Y(msg->point.y);\n  set_Z(msg->point.z);\n  //TODO: Ermitteln wie der Zeitoffset zwicshen Timestamp::ROS ist und der tatsÃ¤chlichen Zeit (to be defined).\n  set_time(msg->header.stamp.sec, msg->header.stamp.nsec);\n}\nvoid TachyInfo::set_X(double setX_fromTachy){\n  x_coord = setX_fromTachy;\n}\nvoid TachyInfo::set_Y(double setY_fromTachy){\n  y_coord = setY_fromTachy;\n}\nvoid TachyInfo::set_Z(double setZ_fromTachy){\n  z_coord = setZ_fromTachy;\n}\nvoid TachyInfo::set_time(unsigned int sec_message_from_tachy, unsigned int nsec_message_from_tachy){\n  sec_last_message = sec_message_from_tachy;\n  nsec_last_message = nsec_message_from_tachy;\n}\ndouble TachyInfo::get_X(){\n  return x_coord;\n}\ndouble TachyInfo::get_Y(){\n  return y_coord;\n}\ndouble TachyInfo::get_Z(){\n  return z_coord;\n}\nunsigned int TachyInfo::get_nsec(){\n  return nsec_last_message;\n}\nunsigned int TachyInfo::get_sec(){\n  return sec_last_message;\n}\n\n\nclass ImuInfo\n{\npublic:\n  ImuInfo()\n  {\n  }\n  void imuCallback(const sensor_msgs::Imu::ConstPtr&);\n  double get_QX();\n  double get_QY();\n  double get_QZ();\n  double get_QW();\n  unsigned int get_sec();\n  unsigned int get_nsec();\nprivate:\n  void set_QX(double);\n  void set_QY(double);\n  void set_QZ(double);\n  void set_QW(double);\n  double qx_rot;\n  double qy_rot;\n  double qz_rot;\n  double qw_rot;\n  void set_time(unsigned int, unsigned int);\n  unsigned int nsec_last_message{0};\n  unsigned int sec_last_message{0};\n};\n\nvoid ImuInfo::imuCallback(const sensor_msgs::Imu::ConstPtr& msg){\n  set_QX(0);\n  set_QY(0);\n  set_QZ(0);\n  set_QW(1);\n  //ROS_INFO(\"I heard an imu: [%s]\", msg->header.frame_id.c_str());\n  set_QX(msg->orientation.x);\n  set_QY(msg->orientation.y);\n  set_QZ(msg->orientation.z);\n  set_QW(msg->orientation.w);\n  set_time(msg->header.stamp.sec, msg->header.stamp.nsec);\n}\nvoid ImuInfo::set_QX(double setQX_fromImu){\n  qx_rot = setQX_fromImu;\n}\nvoid ImuInfo::set_QY(double setQY_fromImu){\n  qy_rot = setQY_fromImu;\n}\nvoid ImuInfo::set_QZ(double setQZ_fromImu){\n  qz_rot = setQZ_fromImu;\n}\nvoid ImuInfo::set_QW(double setQW_fromImu){\n  qw_rot = setQW_fromImu;\n}\ndouble ImuInfo::get_QX(){\n  return qx_rot;\n}\ndouble ImuInfo::get_QY(){\n  return qy_rot;\n}\ndouble ImuInfo::get_QZ(){\n  return qz_rot;\n}\ndouble ImuInfo::get_QW(){\n  return qw_rot;\n}\nvoid ImuInfo::set_time(unsigned int sec_message_from_imu, unsigned int nsec_message_from_imu){\n  sec_last_message = sec_message_from_imu;\n  nsec_last_message = nsec_message_from_imu;\n}\nunsigned int ImuInfo::get_nsec(){\n  return nsec_last_message;\n}\nunsigned int ImuInfo::get_sec(){\n  return sec_last_message;\n}\n\n\n\n\n\nint main(int argc, char **argv){\n\n\n  // launch-parameter definitions\n  std::string pose_global_frame_;\n  std::string pose_local_frame_;\n  double system_orientation_z_;\n  std::string position_provider_;\n  std::string orientation_provider_;\n\n  TachyInfo tachy_object;\n  ImuInfo imu_object;\n  ros::init(argc, argv, \"listen_platform_tf_talker\");\n\n  ros::NodeHandle pnh_(\"~\");\n  pnh_.param<std::string>(\"pose_global_frame\", pose_global_frame_, \"map\");\n  pnh_.param<std::string>(\"pose_local_frame\", pose_local_frame_, \"prisma_frame\");\n  pnh_.param<double>(\"system_orientation_z\", system_orientation_z_, 0.0);\n  pnh_.param<std::string>(\"position_provider\", position_provider_, \"/tachy_points\");\n  pnh_.param<std::string>(\"orientation_provider\", orientation_provider_, \"/imu/data_raw\");\n\n  ros::NodeHandle n;\n  ros::Subscriber sub = n.subscribe(position_provider_, 1000, &TachyInfo::tachyCallback, &tachy_object);\n\n  ros::NodeHandle m;\n  ros::Subscriber subm = m.subscribe(orientation_provider_, 1000, &ImuInfo::imuCallback, &imu_object);\n\n  tf2_ros::TransformBroadcaster tfb;\n  geometry_msgs::TransformStamped transformStamped;\n\n  transformStamped.header.frame_id = pose_global_frame_;\n  transformStamped.child_frame_id = pose_local_frame_;\n  tf2::Quaternion q_init(imu_object.get_QX(), imu_object.get_QY(), imu_object.get_QZ(), imu_object.get_QW());\n \n  while(ros::ok()){\n    ros::spinOnce();\n\n    transformStamped.header.stamp = ros::Time::now();\n\n    // Quaternion rotation is simply possible via multiplication\n    // Measured imu quaternion gets rotated with argv rotation value\n    // Set rotation value is set by user at program start\n    // This rotation value needs to be set as an offset \n    // TODO(linzer): Make determination of rot obsolete\n    tf2::Quaternion q_rotate(imu_object.get_QX(), imu_object.get_QY(), imu_object.get_QZ(), imu_object.get_QW());\n    tf2::Quaternion q_value2rotatequaternion;\n      q_value2rotatequaternion.setRPY(0, 0, (system_orientation_z_*3.14159265359/180));\n    q_rotate = q_value2rotatequaternion*q_rotate;\n    q_rotate = q_rotate-q_init;\n \n    // Acquired values may be near 0 or NaN.\n    // TODO(linzer): Inform user via ROS_INFO\n    transformStamped.transform.rotation.x = q_rotate.x(); \n    transformStamped.transform.rotation.y = q_rotate.y();\n    transformStamped.transform.rotation.z = q_rotate.z();\n    transformStamped.transform.rotation.w = q_rotate.w();\n\n    transformStamped.transform.translation.x = tachy_object.get_X();\n    transformStamped.transform.translation.y = tachy_object.get_Y();\n    transformStamped.transform.translation.z = tachy_object.get_Z();\n    \n    // Time offset check between imu and tachymeter message may be considered. \n    // How to check for updated transform\n    //unsigned int tachy_sec = tachy_object.get_sec();\n    //unsigned int tachy_nsec = tachy_object.get_nsec();\n    //unsigned int imu_sec = imu_object.get_sec();\n    //unsigned int imu_nsec = imu_object.get_nsec();\n    //unsigned int tachy_imu_diff_sec = imu_sec-tachy_sec;\n    //unsigned int tachy_imu_diff_nsec = imu_nsec-tachy_nsec;\n    //std::cout << \"tachy_imu_diff: \" << tachy_imu_diff_sec << \".\" << tachy_imu_diff_nsec << std::endl;\n    tfb.sendTransform(transformStamped);\n    ROS_INFO(\"platform_tf SEND!\");\n  }\nreturn 0;\n} \n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mss_tools/platform_tf/src/listen_platform_tf_talker.cpp	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
+++ src/mss_tools/platform_tf/src/listen_platform_tf_talker.cpp	(date 1606219182000)
@@ -5,7 +5,7 @@
  * @brief  Listen to Tachymeter and IMU data, merge them into a TF - Frame
  * @brief  Indentation: Two spaces, no tabs
 
- * Therefore we need a Position (measured by tachymeter) and an orientation (measured by imu).
+ * The Pose (orientation and position) of a mobile mapping system is to be detected. Therefore we need a Position (measured by tachymeter) and an orientation (measured by imu).
 
  * Tachymeter Data are measured continously by a modern Tachymeter. The data are distributed over a ros NodeHandle (ex. /tachy_points). These Data are already converted to a X,Y,Z Coordinate + Timestamp. This data is brought to you via a geometry_msgs::PointStamped object.
 
@@ -21,7 +21,7 @@
 23 is an example for the init angle of the imu, check which value fits best.
 TODO: Determine angle over absolute method
  *
- * @param [in] degree . Degree in which the data should be transformed in the Z-Axis
+ * @param [in] degree . Degree in which the data should be tranformed in the Z-Axis
  *
  * @retval TRUE   Successfully provide Frame
  * @retval FALSE  Oops, did something.
@@ -225,7 +225,7 @@
 
     // Quaternion rotation is simply possible via multiplication
     // Measured imu quaternion gets rotated with argv rotation value
-    // Set rotation value is set by user at program start
+    // Set rotation value is set by user at programm start
     // This rotation value needs to be set as an offset 
     // TODO(linzer): Make determination of rot obsolete
     tf2::Quaternion q_rotate(imu_object.get_QX(), imu_object.get_QY(), imu_object.get_QZ(), imu_object.get_QW());
Index: .idea/misc.xml
===================================================================
--- .idea/misc.xml	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
+++ .idea/misc.xml	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (akig_2020)" project-jdk-type="Python SDK" />
-</project>
\ No newline at end of file
Index: src/mss_tools/platform_tf/src/listen_platform_tf_talker.py
===================================================================
--- src/mss_tools/platform_tf/src/listen_platform_tf_talker.py	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
+++ src/mss_tools/platform_tf/src/listen_platform_tf_talker.py	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
@@ -1,51 +0,0 @@
-#!/usr/bin/env python
-"""
-@file   listen_platform_tf_talker.py
-@Author Andreas Bayr, AKIG 2020, TU Wien (andreas.bayr@geo.tuwien.ac.at)
-@date   November, 2020
-@brief  Listen to Tachymeter and IMU data, merge them into a TF - Frame
-@brief  rosrun platform_tf listen_platform_tf_talker
-
-input: position (tachy), orientation (imu)
-geometry_msgs::PointStamped, sensor_msgs::Imu
-
-
-output: TF2-Frame
-"""
-import rospy
-import rosbag
-import sys
-from sensor_msgs import point_cloud2, PointStamped
-
-
-class TachyData:
-    def get_x(self):
-        pass
-
-    def get_y(self):
-        pass
-
-    def get_z(self):
-        pass
-
-    def get_time(self):
-        pass
-
-
-class ImuData:
-    def get_qx(self):
-        pass
-
-    def get_qy(self):
-        pass
-
-    def get_qz(self):
-        pass
-
-
-if __name__ == '__main__':
-    rate = rospy.Rate(1.0)
-    while not rospy.is_shutdown():
-        rospy.spin()
-
-        rate.sleep()
Index: .idea/inspectionProfiles/profiles_settings.xml
===================================================================
--- .idea/inspectionProfiles/profiles_settings.xml	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
+++ .idea/inspectionProfiles/profiles_settings.xml	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
@@ -1,6 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <settings>
-    <option name="USE_PROJECT_PROFILE" value="false" />
-    <version value="1.0" />
-  </settings>
-</component>
\ No newline at end of file
Index: .idea/modules.xml
===================================================================
--- .idea/modules.xml	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
+++ .idea/modules.xml	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/akig_2020.iml" filepath="$PROJECT_DIR$/.idea/akig_2020.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/vcs.xml
===================================================================
--- .idea/vcs.xml	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
+++ .idea/vcs.xml	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/.gitignore
===================================================================
--- .idea/.gitignore	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
+++ .idea/.gitignore	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
@@ -1,3 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
Index: src/mss_tools/tf_points_global/src/transform_point2pointcloud.py
===================================================================
--- src/mss_tools/tf_points_global/src/transform_point2pointcloud.py	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
+++ src/mss_tools/tf_points_global/src/transform_point2pointcloud.py	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
@@ -1,1 +0,0 @@
-#!/usr/bin/env python
Index: .idea/akig_2020.iml
===================================================================
--- .idea/akig_2020.iml	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
+++ .idea/akig_2020.iml	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="PYTHON_MODULE" version="4">
-  <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$" />
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: .idea/inspectionProfiles/Project_Default.xml
===================================================================
--- .idea/inspectionProfiles/Project_Default.xml	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
+++ .idea/inspectionProfiles/Project_Default.xml	(revision a3beb922af7debf1967dfe416d66c0993c36c7b2)
@@ -1,22 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <profile version="1.0">
-    <option name="myName" value="Project Default" />
-    <inspection_tool class="PyChainedComparisonsInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true">
-      <option name="ignoreConstantInTheMiddle" value="true" />
-    </inspection_tool>
-    <inspection_tool class="PyStubPackagesAdvertiser" enabled="true" level="WARNING" enabled_by_default="true">
-      <option name="ignoredPackages">
-        <list>
-          <option value="PyQt5-stubs==5.13.1.4" />
-        </list>
-      </option>
-    </inspection_tool>
-    <inspection_tool class="PyUnresolvedReferencesInspection" enabled="true" level="WARNING" enabled_by_default="true">
-      <option name="ignoredIdentifiers">
-        <list>
-          <option value="matplotlib.cm.tab20b" />
-        </list>
-      </option>
-    </inspection_tool>
-  </profile>
-</component>
\ No newline at end of file
